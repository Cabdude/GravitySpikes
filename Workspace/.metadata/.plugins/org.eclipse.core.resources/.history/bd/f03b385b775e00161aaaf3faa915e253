package com.caleb.screens;

import com.badlogic.gdx.Gdx;

import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;

import com.badlogic.gdx.scenes.scene2d.Stage;

import com.badlogic.gdx.utils.viewport.FitViewport;

import com.caleb.gspikes.GravitySpikesRevamped;

public class MainMenuScreen implements Screen {

	private static final int TITLE_WIDTH = 240;
	private static final int TITLE_HEIGHT = 240;

	private static final int PLAY_WIDTH = 240;
	private static final int PLAY_HEIGHT = 240;

	private static final int TITLE_Y = 300;
	private static final int PLAY_Y = 100;

	private Texture mainMenuBackground;
	private Texture menuTitle;
	private Texture playButtonInactive;
	private Texture playButtonActive;

	


	
	private Stage stage;

	private GravitySpikesRevamped game;

	private Music music;

	private FitViewport menuPort;
	
	public MainMenuScreen(GravitySpikesRevamped game) {
		this.game = game;
		this.game.loadingMusic();
		mainMenuBackground = new Texture("MenuBackground.png");
		menuTitle = new Texture("Title.png");
		playButtonInactive = new Texture("PlayButtonInactive.png");
		playButtonActive = new Texture("PlayButtonActive.png");

		menuPort = new FitViewport(GravitySpikesRevamped.GAME_WIDTH / GravitySpikesRevamped.PPM,
				GravitySpikesRevamped.GAME_HEIGHT / GravitySpikesRevamped.PPM, new OrthographicCamera());

		this.game.musicManager.finishLoadingAsset("audio/music/technosound.ogg");
		music = this.game.musicManager.get("audio/music/technosound.ogg", Music.class);
		music.setLooping(true);
		music.play();

	
		stage = new Stage(menuPort, this.game.batch);

		

	}



	@Override
	public void show() {
	}

	@Override
	public void render(float delta) {
		Gdx.gl.glClearColor(0, 0, 0, 0);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

	
		game.batch.begin();
		game.batch.draw(menuTitle, GravitySpikesRevamped.GAME_WIDTH / 2, TITLE_Y,
				TITLE_WIDTH / GravitySpikesRevamped.PPM,
				TITLE_HEIGHT / GravitySpikesRevamped.PPM);
		
		game.batch.draw(mainMenuBackground, 0, 0,
				GravitySpikesRevamped.GAME_WIDTH / GravitySpikesRevamped.PPM,
				GravitySpikesRevamped.GAME_HEIGHT / GravitySpikesRevamped.PPM);
		
		
		handleInput();
		game.batch.end();
		stage.draw();

	}

	public void handleInput() {

		int playX = GravitySpikesRevamped.GAME_WIDTH / 2 - PLAY_WIDTH / 2;

		if (Gdx.input.getX() / GravitySpikesRevamped.PPM < (playX + PLAY_WIDTH) / GravitySpikesRevamped.PPM
				&& Gdx.input.getX() / GravitySpikesRevamped.PPM > (playX) / GravitySpikesRevamped.PPM
				&& (GravitySpikesRevamped.GAME_HEIGHT - Gdx.input.getY())
						/ GravitySpikesRevamped.PPM < (PLAY_Y + PLAY_HEIGHT) / GravitySpikesRevamped.PPM
				&& (GravitySpikesRevamped.GAME_HEIGHT - Gdx.input.getY()) / GravitySpikesRevamped.PPM > (PLAY_Y)
						/ GravitySpikesRevamped.PPM) {

			game.batch.draw(playButtonActive,
					GravitySpikesRevamped.GAME_WIDTH / 2 / GravitySpikesRevamped.PPM
							- PLAY_WIDTH / 2 / GravitySpikesRevamped.PPM,
					PLAY_Y / GravitySpikesRevamped.PPM, PLAY_WIDTH / GravitySpikesRevamped.PPM,
					PLAY_HEIGHT / GravitySpikesRevamped.PPM);

			if (Gdx.input.isTouched()) {
				game.setScreen(new LevelSelectScreen(game));
			}
		} else {
			game.batch.draw(playButtonInactive,
					GravitySpikesRevamped.GAME_WIDTH / 2 / GravitySpikesRevamped.PPM
							- PLAY_WIDTH / 2 / GravitySpikesRevamped.PPM,
					PLAY_Y / GravitySpikesRevamped.PPM, PLAY_WIDTH/ GravitySpikesRevamped.PPM,
					PLAY_HEIGHT / GravitySpikesRevamped.PPM);
		}

	}

	@Override
	public void resize(int width, int height) {
		menuPort.update(width, height);
	}

	@Override
	public void pause() {

	}

	@Override
	public void resume() {

	}

	@Override
	public void hide() {

	}

	@Override
	public void dispose() {

		mainMenuBackground.dispose();
		menuTitle.dispose();
		playButtonActive.dispose();
		playButtonInactive.dispose();
		stage.dispose();
		game.dispose();
		music.dispose();

		game.batch.dispose();
	}





}
